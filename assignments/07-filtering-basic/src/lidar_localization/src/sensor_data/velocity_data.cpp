/*
 * @Description: velocity data
 * @Author: Ren Qian
 * @Date: 2020-02-23 22:20:41
 */
#include "lidar_localization/sensor_data/velocity_data.hpp"

#include "glog/logging.h"

namespace lidar_localization {
bool VelocityData::SyncData(std::deque<VelocityData>& UnsyncedData, std::deque<VelocityData>& SyncedData, double sync_time) {
    // 传感器数据按时间序列排列，在传感器数据中为同步的时间点找到合适的时间位置
    // 即找到与同步时间相邻的左右两个数据
    // 需要注意的是，如果左右相邻数据有一个离同步时间差值比较大，则说明数据有丢失，时间离得太远不适合做差值

    // ！！！寻找需要同步时刻左右两帧速度数据
    // 若时间差异大于0.2s，说明数据有丢失，时间离得太远不适合做差值   
    while (UnsyncedData.size() >= 2) {
        if (UnsyncedData.front().time > sync_time)
            return false;
        if (UnsyncedData.at(1).time < sync_time) {
            UnsyncedData.pop_front();
            continue;
        }
        if (sync_time - UnsyncedData.front().time > 0.2) {
            UnsyncedData.pop_front();
            return false;
        }
        if (UnsyncedData.at(1).time - sync_time > 0.2) {
            UnsyncedData.pop_front();
            return false;
        }
        break;
    }
    if (UnsyncedData.size() < 2)
        return false;

    VelocityData front_data = UnsyncedData.at(0);
    VelocityData back_data = UnsyncedData.at(1);
    VelocityData synced_data;

    // 使用线性插值对线速度和角速度进行解算
    double front_scale = (back_data.time - sync_time) / (back_data.time - front_data.time);
    double back_scale = (sync_time - front_data.time) / (back_data.time - front_data.time);
    synced_data.time = sync_time;
    synced_data.linear_velocity.x = front_data.linear_velocity.x * front_scale + back_data.linear_velocity.x * back_scale;
    synced_data.linear_velocity.y = front_data.linear_velocity.y * front_scale + back_data.linear_velocity.y * back_scale;
    synced_data.linear_velocity.z = front_data.linear_velocity.z * front_scale + back_data.linear_velocity.z * back_scale;
    synced_data.angular_velocity.x = front_data.angular_velocity.x * front_scale + back_data.angular_velocity.x * back_scale;
    synced_data.angular_velocity.y = front_data.angular_velocity.y * front_scale + back_data.angular_velocity.y * back_scale;
    synced_data.angular_velocity.z = front_data.angular_velocity.z * front_scale + back_data.angular_velocity.z * back_scale;

    SyncedData.push_back(synced_data);

    return true;
}

void VelocityData::TransformCoordinate(Eigen::Matrix4f transform_matrix) {
    // 更新位姿矩阵
    Eigen::Matrix4d matrix = transform_matrix.cast<double>();

    Eigen::Matrix3d R = matrix.block<3,3>(0,0);
    Eigen::Vector3d t = matrix.block<3,1>(0,3);

    // get angular & linear velocities in IMU frame:
    // 将角速度和线速度转换为Eigen形式
    Eigen::Vector3d w(angular_velocity.x, angular_velocity.y, angular_velocity.z);
    Eigen::Vector3d v(linear_velocity.x, linear_velocity.y, linear_velocity.z);

    // a. first, add velocity component generated by rotation:
    // 通过旋转矩阵生成线速度增量
    Eigen::Vector3d delta_v;
    delta_v(0) = w(1) * t(2) - w(2) * t(1);
    delta_v(1) = w(2) * t(0) - w(0) * t(2);
    delta_v(2) = w(0) * t(1) - w(1) * t(0);
    v += delta_v;

    // b. transform velocities in IMU frame to lidar frame:
    // 将imu坐标系的速度向量转化为雷达坐标系
    w = R.transpose() * w;
    v = R.transpose() * v;

    // finally:
    // 更新线速度和角速度
    angular_velocity.x = w(0);
    angular_velocity.y = w(1);
    angular_velocity.z = w(2);
    linear_velocity.x = v(0);
    linear_velocity.y = v(1);
    linear_velocity.z = v(2);
}

void VelocityData::NED2ENU(void) {
    LinearVelocity linear_velocity_enu;

    linear_velocity_enu.x = +linear_velocity.y;
    linear_velocity_enu.y = +linear_velocity.x;
    linear_velocity_enu.z = -linear_velocity.z;

    linear_velocity.x = linear_velocity_enu.x;
    linear_velocity.y = linear_velocity_enu.y;
    linear_velocity.z = linear_velocity_enu.z;

    AngularVelocity angular_velocity_enu;

    angular_velocity_enu.x = +angular_velocity.y;
    angular_velocity_enu.y = +angular_velocity.x;
    angular_velocity_enu.z = -angular_velocity.z;

    angular_velocity.x = angular_velocity_enu.x;
    angular_velocity.y = angular_velocity_enu.y;
    angular_velocity.z = angular_velocity_enu.z;
}

}